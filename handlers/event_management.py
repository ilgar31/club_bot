from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database import get_events, add_event, update_event, delete_event, update_payment_link, add_payment_link
from keyboards.main_menu import get_main_menu
from datetime import datetime
from io import BytesIO
import pandas as pd
import sqlite3
from aiogram.types import FSInputFile


router = Router()

choice_name = {
    "name": "–ù–∞–∑–≤–∞–Ω–∏–µ",
    "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
    "photo": "–§–æ—Ç–æ",
    "price": "–¶–µ–Ω–∞",
    "date": "–î–∞—Ç–∞ (–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú)",
    "is_sale_active": "–°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥–∞–∂",
    "qr_template": "QR-—à–∞–±–ª–æ–Ω",
    "photo_album_link": "–§–æ—Ç–æ–∞–ª—å–±–æ–º (–∏–ª–∏ —Å–ª–æ–≤–æ '–ù–µ—Ç')"
}

def validate_date_format(date_str: str, date_format: str = "%Y-%m-%d %H:%M") -> bool:
    try:
        datetime.strptime(date_str, date_format)
        return True
    except ValueError:
        return False

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
class EventManagementStates(StatesGroup):
    waiting_for_event_name = State()
    waiting_for_event_description = State()
    waiting_for_event_photo = State()
    waiting_for_event_price = State()
    waiting_for_event_date = State()
    waiting_for_event_is_sale_active = State()
    waiting_for_event_qr_template = State()
    waiting_for_event_photo_album_link = State()
    waiting_for_event_edit_choice = State()
    waiting_for_new_value = State()
    waiting_for_new_value_qr = State()
    waiting_for_new_value_sale = State()
    waiting_for_event_delete_choice = State()
    waiting_payment_link = State()


def export_event_attendees_to_excel(event_id: int, output_file: str = "–°–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π.xlsx"):
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect("rout_bot.db")
    cursor = conn.cursor()

    # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, –∫—É–ø–∏–≤—à–∏—Ö –±–∏–ª–µ—Ç—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ
    query = """
        SELECT u.full_name, u.university, u.phone_number
        FROM users u
        JOIN tickets t ON u.id = t.user_id
        WHERE t.event_id = ?
    """
    cursor.execute(query, (event_id,))
    attendees = cursor.fetchall()

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    conn.close()

    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã, —Å–æ–∑–¥–∞—ë–º DataFrame –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
    if attendees:
        # –°–æ–∑–¥–∞—ë–º DataFrame –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        df = pd.DataFrame(attendees, columns=["–§–ò–û", "–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç", "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º DataFrame –≤ Excel-—Ñ–∞–π–ª
        df.to_excel(output_file, index=False)
        print(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ñ–∞–π–ª {output_file}")
    else:
        print("–ù–∞ –¥–∞–Ω–Ω–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –±–∏–ª–µ—Ç—ã –Ω–µ –∫—É–ø–ª–µ–Ω—ã.")


@router.message(F.text == "üìÑ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π")
async def get_guests(message: types.Message, state: FSMContext):
    events = get_events()
    if not events:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        return

    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
    builder = InlineKeyboardBuilder()
    for event in events:
        builder.button(text=event["name"], callback_data=f"guests_event_{event['id']}")
    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=builder.as_markup())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("guests_event_"))
async def get_guests_event(callback: types.CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[-1])
    await callback.message.delete()

    export_event_attendees_to_excel(event_id)

    await callback.message.answer_document(
        document=FSInputFile("–°–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π.xlsx")
    )
    await callback.answer()



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üí∞ –û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã"
@router.message(F.text == "üí∞ –û–±–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã")
async def manage_payment_link(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã")
    await state.set_state(EventManagementStates.waiting_payment_link)


@router.message(EventManagementStates.waiting_payment_link)
async def update_payment_link_f(message: types.Message, state: FSMContext):
    update_payment_link(message.text)
    await message.answer("–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏"
@router.message(F.text == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏")
async def manage_events(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.button(text="–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="add_event")
    builder.button(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="edit_event")
    builder.button(text="–£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", callback_data="delete_event")
    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.callback_query(F.data == "add_event")
async def add_event_start(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(EventManagementStates.waiting_for_event_name)
    await callback.answer()

@router.message(EventManagementStates.waiting_for_event_name)
async def process_event_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(EventManagementStates.waiting_for_event_description)

@router.message(EventManagementStates.waiting_for_event_description)
async def process_event_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(EventManagementStates.waiting_for_event_photo)

@router.message(EventManagementStates.waiting_for_event_photo, F.photo)
async def process_event_photo(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo=photo_id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –±–∏–ª–µ—Ç–∞:")
    await state.set_state(EventManagementStates.waiting_for_event_price)

@router.message(EventManagementStates.waiting_for_event_price)
async def process_event_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
        await state.update_data(price=price)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")
        await state.set_state(EventManagementStates.waiting_for_event_date)
    except ValueError:
        await message.answer("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.message(EventManagementStates.waiting_for_event_date)
async def process_event_date(message: types.Message, state: FSMContext):
    date_str = message.text
    if not validate_date_format(date_str):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú.")
        return

    await state.update_data(date=date_str)
    await message.answer("–ü—Ä–æ–¥–∞–∂–∞ –±–∏–ª–µ—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω–∞? (–î–∞/–ù–µ—Ç):")
    await state.set_state(EventManagementStates.waiting_for_event_is_sale_active)

@router.message(EventManagementStates.waiting_for_event_is_sale_active)
async def process_event_sale_status(message: types.Message, state: FSMContext):
    is_sale_active = message.text.lower() in ["–¥–∞", "yes", "true"]
    await state.update_data(is_sale_active=is_sale_active)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è QR-–∫–æ–¥–∞ (—Ñ–æ—Ç–æ):")
    await state.set_state(EventManagementStates.waiting_for_event_qr_template)

@router.message(EventManagementStates.waiting_for_event_qr_template, F.photo)
async def process_event_qr_template(message: types.Message, state: FSMContext):
    qr_template_file_id  = message.photo[-1].file_id

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å
    file = await message.bot.get_file(qr_template_file_id)
    file_bytes = await message.bot.download_file(file.file_path)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
    qr_template_path = f"qr_templates/template_{message.from_user.id}.png"
    with open(qr_template_path, "wb") as f:
        f.write(file_bytes.getvalue())

    await state.update_data(qr_template=qr_template_path)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ–∞–ª—å–±–æ–º (–∏–ª–∏ —Å–ª–æ–≤–æ '–ù–µ—Ç'):")
    await state.set_state(EventManagementStates.waiting_for_event_photo_album_link)

@router.message(EventManagementStates.waiting_for_event_photo_album_link)
async def process_event_photo_album_link(message: types.Message, state: FSMContext):
    photo_album_link = message.text if message.text else None
    await state.update_data(photo_album_link=photo_album_link)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    event_data = await state.get_data()
    print(event_data)
    add_event(**event_data)

    await message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=get_main_menu(message.from_user.id))
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
@router.callback_query(F.data == "edit_event")
async def edit_event_start(callback: types.CallbackQuery, state: FSMContext):
    events = get_events()
    if not events:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        await callback.answer()
        return

    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
    builder = InlineKeyboardBuilder()
    for event in events:
        builder.button(text=event["name"], callback_data=f"edit_event_{event['id']}")
    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ
    await callback.message.delete()

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:", reply_markup=builder.as_markup())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("edit_event_"))
async def choose_event_to_edit(callback: types.CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[-1])
    await state.update_data(event_id=event_id)

    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.button(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_name")
    builder.button(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_description")
    builder.button(text="–§–æ—Ç–æ", callback_data="edit_photo")
    builder.button(text="–¶–µ–Ω–∞", callback_data="edit_price")
    builder.button(text="–î–∞—Ç–∞", callback_data="edit_date")
    builder.button(text="–°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥–∞–∂", callback_data="edit_is_sale_active")
    builder.button(text="QR-—à–∞–±–ª–æ–Ω", callback_data="edit_qr_template")
    builder.button(text="–§–æ—Ç–æ–∞–ª—å–±–æ–º", callback_data="edit_photo_album_link")
    builder.adjust(2)  # –ü–æ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ
    await callback.message.delete()

    await callback.message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(F.data == "edit_is_sale_active")
async def choose_sale_status_to_edit(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü—Ä–æ–¥–∞–∂–∞ –±–∏–ª–µ—Ç–æ–≤ –∞–∫—Ç–∏–≤–Ω–∞? (–î–∞/–ù–µ—Ç):")
    await state.set_state(EventManagementStates.waiting_for_new_value_sale)
    await callback.answer()

@router.message(EventManagementStates.waiting_for_new_value_sale)
async def process_new_sale_status(message: types.Message, state: FSMContext):
    user_data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ event_id
    if "event_id" not in user_data:
        await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    event_id = user_data["event_id"]
    user_input = message.text.lower()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ
    if user_input in ["–¥–∞", "yes", "true", "1"]:
        new_sale_status = True
    elif user_input in ["–Ω–µ—Ç", "no", "false", "0"]:
        new_sale_status = False
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–¥–∞–∂ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_event(event_id, is_sale_active=new_sale_status)

    await message.answer(f"–°—Ç–∞—Ç—É—Å –ø—Ä–æ–¥–∞–∂ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {'–∞–∫—Ç–∏–≤–µ–Ω' if new_sale_status else '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}!", reply_markup=get_main_menu(message.from_user.id))
    await state.clear()

@router.callback_query(F.data == "edit_qr_template")
async def choose_qr_to_edit(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ QR-–∫–æ–¥–∞:")
    await state.set_state(EventManagementStates.waiting_for_new_value_qr)
    await callback.answer()

@router.message(EventManagementStates.waiting_for_new_value_qr, F.photo)
async def process_new_qr(message: types.Message, state: FSMContext):
    user_data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ event_id
    if "event_id" not in user_data:
        await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    event_id = user_data["event_id"]

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —à–∞–±–ª–æ–Ω–∞ QR-–∫–æ–¥–∞
    try:
        file = await message.bot.get_file(message.photo[-1].file_id)
        file_bytes = await message.bot.download_file(file.file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫
        qr_template_path = f"qr_templates/template_{event_id}.png"
        with open(qr_template_path, "wb") as f:
            f.write(file_bytes.getvalue())

        # –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω QR-–∫–æ–¥–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        update_event(event_id, qr_template=qr_template_path)

        await message.answer("–®–∞–±–ª–æ–Ω QR-–∫–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=get_main_menu(message.from_user.id))
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞ QR-–∫–æ–¥–∞: {e}")
    finally:
        await state.clear()

@router.callback_query(F.data == "edit_photo")
async def choose_photo_to_edit(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:")
    await state.set_state(EventManagementStates.waiting_for_new_value)
    await callback.answer()

@router.message(EventManagementStates.waiting_for_new_value, F.photo)
async def process_new_photo(message: types.Message, state: FSMContext):
    user_data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ event_id
    if "event_id" not in user_data:
        await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    event_id = user_data["event_id"]
    new_photo = message.photo[-1].file_id  # –ü–æ–ª—É—á–∞–µ–º file_id –Ω–æ–≤–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–æ—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_event(event_id, photo=new_photo)

    await message.answer("–§–æ—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=get_main_menu(message.from_user.id))
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("edit_"))
async def choose_parameter_to_edit(callback: types.CallbackQuery, state: FSMContext):
    parameter = callback.data  # –ù–∞–ø—Ä–∏–º–µ—Ä, "edit_name"
    await state.update_data(parameter=parameter)

    await callback.message.delete()

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {choice_name[parameter.replace('edit_', '')]}:")
    await state.set_state(EventManagementStates.waiting_for_new_value)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
@router.message(EventManagementStates.waiting_for_new_value)
async def process_new_value(message: types.Message, state: FSMContext):
    user_data = await state.get_data()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ event_id –∏ parameter
    if "event_id" not in user_data or "parameter" not in user_data:
        await message.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    event_id = user_data["event_id"]
    parameter = user_data["parameter"]
    new_value = message.text

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_event(event_id, **{parameter.replace("edit_", ""): new_value})

    await message.answer(f"–ü–∞—Ä–∞–º–µ—Ç—Ä '{choice_name[parameter.replace('edit_', '')]}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=get_main_menu(message.from_user.id))
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.callback_query(F.data == "delete_event")
async def delete_event_start(callback: types.CallbackQuery):
    events = get_events()
    if not events:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        await callback.answer()
        return

    builder = InlineKeyboardBuilder()
    for event in events:
        builder.button(text=event["name"], callback_data=f"delete_event_{event['id']}")
    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=builder.as_markup())
    await callback.answer()

@router.callback_query(F.data.startswith("delete_event_"))
async def delete_event_confirm(callback: types.CallbackQuery):
    event_id = int(callback.data.split("_")[-1])
    delete_event(event_id)
    await callback.message.answer("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!", reply_markup=get_main_menu(callback.from_user.id))
    await callback.answer()