from aiogram import Router, types, F
from aiogram.filters import Command
from pyexpat.errors import messages

from keyboards.main_menu import get_main_menu
from database import  get_ticket_by_id, get_user, get_event_by_id, get_all_used_tickets, add_used_ticket
from config import ADMINS
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardMarkup, KeyboardButton


router = Router()

@router.message(Command("start"))
async def start_cmd(message: types.Message):
    if message.text.startswith("/start ticket_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ticket_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        ticket_id = message.text.split("_")[1]

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–ª–µ—Ç–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        ticket_info = get_ticket_by_id(ticket_id)
        user = get_user(ticket_info['user_id'])
        event = get_event_by_id(ticket_info['event_id'])
        used = [i[0] for i in get_all_used_tickets()]

        ticket_valid = True
        for i in used:
            if int(ticket_id) == int(i):
                ticket_valid = False


        if ticket_info:
            if message.from_user.id in ADMINS:
                builder = InlineKeyboardBuilder()
                builder.button(text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω", callback_data=f"used_ticket_{ticket_id}")

                if ticket_valid:
                    await message.answer(
                        f"üéü *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–ª–µ—Ç–µ*\n"
                        f"–ò–º—è: {user['full_name']}\n"
                        f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event['name']}\n"
                        f"–î–∞—Ç–∞: {event['date']}\n"
                        f"–°—Ç–∞—Ç—É—Å: ‚úÖ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω",
                        parse_mode="Markdown", reply_markup=builder.as_markup()
                    )
                else:
                    await message.answer(
                        f"üéü *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–ª–µ—Ç–µ*\n"
                        f"–ò–º—è: {user['full_name']}\n"
                        f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event['name']}\n"
                        f"–î–∞—Ç–∞: {event['date']}\n"
                        f"–°—Ç–∞—Ç—É—Å: ‚ùå –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω",
                        parse_mode="Markdown"
                    )
            else:
                await message.answer(
                    f"üéü *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–ª–µ—Ç–µ*\n"
                    f"–ò–º—è: {user['full_name']}\n"
                    f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event['name']}\n"
                    f"–î–∞—Ç–∞: {event['date']}\n",
                    parse_mode="Markdown"
                )
        else:
            await message.answer("‚ùå –ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.")
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç ROUT.\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, —É–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏—á–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º –∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.",
            reply_markup=get_main_menu(message.chat.id)
        )

@router.callback_query(F.data.startswith("used_ticket_"))
async def used_ticket(callback: types.CallbackQuery):
    ticket_id = int(callback.data.split("_")[2])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    await callback.message.answer("–ë–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!")
    add_used_ticket(ticket_id)