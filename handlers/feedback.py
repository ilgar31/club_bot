from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from keyboards.main_menu import get_main_menu
from database import get_user_events, add_feedback, get_event_by_id, get_user # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
from config import ADMINS

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞
class FeedbackStates(StatesGroup):
    waiting_for_event = State()
    waiting_for_feedback = State()
    
@router.message(F.text == "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
async def feedback(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.button(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", callback_data="contact_manager")
    builder.button(text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="leave_feedback")

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=builder.as_markup())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
@router.callback_query(F.data == "contact_manager")
async def contact_manager(callback: types.CallbackQuery):
    await callback.message.answer("–°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º: @admin_username")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤"
@router.callback_query(F.data == "leave_feedback")
async def leave_feedback(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user_events = get_user_events(user_id)  # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if not user_events:
        await callback.message.answer("–í—ã –µ—â–µ –Ω–µ –ø–æ—Å–µ—â–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
        await callback.answer()
        return

    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    builder = InlineKeyboardBuilder()
    for event in user_events:
        builder.button(text=event["name"], callback_data=f"feedback_event_{event['id']}")
    builder.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ

    await callback.message.answer("–ù–∞ –∫–∞–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤?", reply_markup=builder.as_markup())
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –æ—Ç–∑—ã–≤–∞
@router.callback_query(F.data.startswith("feedback_event_"))
async def choose_event_for_feedback(callback: types.CallbackQuery, state: FSMContext):
    event_id = int(callback.data.split("_")[-1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
    await state.update_data(event_id=event_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await callback.message.answer("–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤:")
    await state.set_state(FeedbackStates.waiting_for_feedback)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞
@router.message(FeedbackStates.waiting_for_feedback)
async def process_feedback(message: types.Message, state: FSMContext):
    feedback_text = message.text
    user_data = await state.get_data()
    event_id = user_data["event_id"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—Ñ—É–Ω–∫—Ü–∏—è add_feedback –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ database.py)
    add_feedback(message.from_user.id, event_id, feedback_text)

    event = get_event_by_id(event_id)
    user = get_user(message.from_user.id)

    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
    for admin_id in ADMINS:
        await message.bot.send_message(admin_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤ –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏: {event['name']}.\n\nüë§ –ò–º—è: {user['full_name']}\n‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç: {user['phone_number']}\nüì± Telegram: @{message.from_user.username}\n–û—Ç–∑—ã–≤: {feedback_text}")
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ