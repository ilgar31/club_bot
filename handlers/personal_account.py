from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardMarkup, KeyboardButton
from keyboards.main_menu import get_main_menu
from database import get_user, get_user_events, add_user, update_user, get_user_tickets
import time
from aiogram.types import FSInputFile

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class RegistrationStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_university = State()
    waiting_for_contact = State()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"
@router.message(F.text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def personal_account(message: types.Message, state: FSMContext):
    user = get_user(message.from_user.id)
    if not user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—Å!")
        time.sleep(1)
        await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:", reply_markup=get_cancel_keyboard())
        await state.set_state(RegistrationStates.waiting_for_name)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
        await show_personal_account(message, user)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏
@router.message(RegistrationStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_menu(message.chat.id))
        return

    await state.update_data(full_name=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤—É–∑ –∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:", reply_markup=get_cancel_keyboard())
    await state.set_state(RegistrationStates.waiting_for_university)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—É–∑–∞ –∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
@router.message(RegistrationStates.waiting_for_university)
async def process_university(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_menu(message.chat.id))
        return

    await state.update_data(university=message.text)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—É–∑ –∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
    await message.answer("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=get_contact_keyboard())
    await state.set_state(RegistrationStates.waiting_for_contact)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
@router.message(RegistrationStates.waiting_for_contact, F.contact)
async def process_contact(message: types.Message, state: FSMContext):
    contact = message.contact
    user_data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    add_user(
        user_id=message.from_user.id,
        full_name=user_data["full_name"],
        university=user_data["university"],
        phone_number=contact.phone_number
    )

    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ.", reply_markup=get_main_menu(message.chat.id))
    await state.clear()  # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    time.sleep(1)
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
    await show_personal_account(message, get_user(message.from_user.id))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –Ω–∞ —ç—Ç–∞–ø–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
@router.message(RegistrationStates.waiting_for_contact)
async def cancel_contact(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_menu(message.chat.id))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞
async def show_personal_account(message: types.Message, user: dict):
    builder = InlineKeyboardBuilder()
    builder.button(text="–ú–æ–∏ —Ç—É—Å–æ–≤–∫–∏", callback_data="my_events")
    builder.button(text="–ú–æ–∏ –±–∏–ª–µ—Ç—ã", callback_data="my_tickets")
    builder.button(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_data")

    await message.answer(
        f"–ò–º—è: {user['full_name']}\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user['phone_number']}\n"
        f"–í—É–∑: {user['university']}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —Ç—É—Å–æ–≤–æ–∫: {len(get_user_events(user['id']))}",
        reply_markup=builder.as_markup()
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
def get_contact_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º", request_contact=True)],
            [KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã
def get_cancel_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )


# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
class EditDataStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_university = State()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ —Ç—É—Å–æ–≤–∫–∏"
@router.callback_query(F.data == "my_events")
async def my_events(callback: types.CallbackQuery):
    user = get_user(callback.from_user.id)
    if not user:
        await callback.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=get_main_menu(callback.message.chat.id))
        return

    user_events = get_user_events(user["id"])
    if not user_events:
        await callback.message.answer("–í—ã –µ—â–µ –Ω–µ –ø–æ—Å–µ—â–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.")
        await callback.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Å–µ—â–µ–Ω–Ω—ã–º–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–º–∏
    events_text = "–í–∞—à–∏ —Ç—É—Å–æ–≤–∫–∏:\n\n"
    for event in user_events:
        events_text += f"üéâ {event['name']}\n"
        if event.get("photo_album_link") != '–ù–µ—Ç':
            events_text += f"üì∏ [–§–æ—Ç–æ–∞–ª—å–±–æ–º]({event['photo_album_link']})\n"
        events_text += "\n"

    await callback.message.answer(events_text, parse_mode="Markdown")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –±–∏–ª–µ—Ç—ã"
@router.callback_query(F.data == "my_tickets")
async def my_tickets(callback: types.CallbackQuery):
    user = get_user(callback.from_user.id)
    if not user:
        await callback.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=get_main_menu(callback.message.chat.id))
        return

    # –ü–æ–ª—É—á–∞–µ–º –±–∏–ª–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_tickets = get_user_tickets(user["id"])
    if not user_tickets:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤.")
        await callback.answer()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∏–ª–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    for ticket in user_tickets:
        photo = FSInputFile(ticket["qr_code"])
        await callback.message.answer_photo(
            photo=photo,
            caption=f"–ë–∏–ª–µ—Ç –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {ticket['event_name']}"
        )

    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ"
@router.callback_query(F.data == "edit_data")
async def edit_data(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –Ω–æ–≤–æ–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:", reply_markup=get_cancel_keyboard())
    await state.set_state(EditDataStates.waiting_for_name)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
@router.message(EditDataStates.waiting_for_name)
async def process_new_name(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu(message.chat.id))
        return

    await state.update_data(full_name=message.text)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π –≤—É–∑ –∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:", reply_markup=get_cancel_keyboard())
    await state.set_state(EditDataStates.waiting_for_university)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –≤—É–∑–∞
@router.message(EditDataStates.waiting_for_university)
async def process_new_university(message: types.Message, state: FSMContext):
    if message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu(message.chat.id))
        return

    user_data = await state.get_data()
    update_user(
        user_id=message.from_user.id,
        full_name=user_data["full_name"],
        university=message.text
    )

    await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", reply_markup=get_main_menu(message.chat.id))
    await state.clear()